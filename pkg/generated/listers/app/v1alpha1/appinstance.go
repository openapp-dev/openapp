/*
Copyright 2024 The OpenAPP Authors.
SPDX-License-Identifier: BUSL-1.1
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openapp-dev/openapp/pkg/apis/app/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppInstanceLister helps list AppInstances.
// All objects returned here must be treated as read-only.
type AppInstanceLister interface {
	// List lists all AppInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppInstance, err error)
	// AppInstances returns an object that can list and get AppInstances.
	AppInstances(namespace string) AppInstanceNamespaceLister
	AppInstanceListerExpansion
}

// appInstanceLister implements the AppInstanceLister interface.
type appInstanceLister struct {
	indexer cache.Indexer
}

// NewAppInstanceLister returns a new AppInstanceLister.
func NewAppInstanceLister(indexer cache.Indexer) AppInstanceLister {
	return &appInstanceLister{indexer: indexer}
}

// List lists all AppInstances in the indexer.
func (s *appInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.AppInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppInstance))
	})
	return ret, err
}

// AppInstances returns an object that can list and get AppInstances.
func (s *appInstanceLister) AppInstances(namespace string) AppInstanceNamespaceLister {
	return appInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppInstanceNamespaceLister helps list and get AppInstances.
// All objects returned here must be treated as read-only.
type AppInstanceNamespaceLister interface {
	// List lists all AppInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AppInstance, err error)
	// Get retrieves the AppInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AppInstance, error)
	AppInstanceNamespaceListerExpansion
}

// appInstanceNamespaceLister implements the AppInstanceNamespaceLister
// interface.
type appInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppInstances in the indexer for a given namespace.
func (s appInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AppInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AppInstance))
	})
	return ret, err
}

// Get retrieves the AppInstance from the indexer for a given namespace and name.
func (s appInstanceNamespaceLister) Get(name string) (*v1alpha1.AppInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("appinstance"), name)
	}
	return obj.(*v1alpha1.AppInstance), nil
}
