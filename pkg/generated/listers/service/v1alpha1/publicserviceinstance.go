/*
Copyright 2024 The OpenAPP Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "github.com/openapp-dev/openapp/pkg/apis/service/v1alpha1"
)

// PublicServiceInstanceLister helps list PublicServiceInstances.
// All objects returned here must be treated as read-only.
type PublicServiceInstanceLister interface {
	// List lists all PublicServiceInstances in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PublicServiceInstance, err error)
	// PublicServiceInstances returns an object that can list and get PublicServiceInstances.
	PublicServiceInstances(namespace string) PublicServiceInstanceNamespaceLister
	PublicServiceInstanceListerExpansion
}

// publicServiceInstanceLister implements the PublicServiceInstanceLister interface.
type publicServiceInstanceLister struct {
	indexer cache.Indexer
}

// NewPublicServiceInstanceLister returns a new PublicServiceInstanceLister.
func NewPublicServiceInstanceLister(indexer cache.Indexer) PublicServiceInstanceLister {
	return &publicServiceInstanceLister{indexer: indexer}
}

// List lists all PublicServiceInstances in the indexer.
func (s *publicServiceInstanceLister) List(selector labels.Selector) (ret []*v1alpha1.PublicServiceInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PublicServiceInstance))
	})
	return ret, err
}

// PublicServiceInstances returns an object that can list and get PublicServiceInstances.
func (s *publicServiceInstanceLister) PublicServiceInstances(namespace string) PublicServiceInstanceNamespaceLister {
	return publicServiceInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PublicServiceInstanceNamespaceLister helps list and get PublicServiceInstances.
// All objects returned here must be treated as read-only.
type PublicServiceInstanceNamespaceLister interface {
	// List lists all PublicServiceInstances in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PublicServiceInstance, err error)
	// Get retrieves the PublicServiceInstance from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PublicServiceInstance, error)
	PublicServiceInstanceNamespaceListerExpansion
}

// publicServiceInstanceNamespaceLister implements the PublicServiceInstanceNamespaceLister
// interface.
type publicServiceInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PublicServiceInstances in the indexer for a given namespace.
func (s publicServiceInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PublicServiceInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PublicServiceInstance))
	})
	return ret, err
}

// Get retrieves the PublicServiceInstance from the indexer for a given namespace and name.
func (s publicServiceInstanceNamespaceLister) Get(name string) (*v1alpha1.PublicServiceInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("publicserviceinstance"), name)
	}
	return obj.(*v1alpha1.PublicServiceInstance), nil
}
